package flowerProject;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.StringTokenizer;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * アクションサーブレット
 * 各ボタンの押下時処理を実行する
 * @author sonata
 *
 */
public class ActionServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	// JSPベース
	private static final String JSP_BASE = "/";

	// コネクション
	private Connection _pooledConnection;

	/**
	 * コンストラクタ
	 */
	public ActionServlet() {
		_pooledConnection = null;
	}

	public void destroy() {
		if(_pooledConnection != null) {
			try {
				_pooledConnection.close();
			} catch(SQLException e) {
				;
			}
			_pooledConnection = null;
		}
		super.destroy();
	}

	/**
	 * ログイン処理
	 */
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String action = req.getParameter("action");
		String forward = null;

		if("login".equals(action)) {
			forward = JSP_BASE + "login.jsp";
		} else {
			forward = doError(req, resp, "ログイン時にエラーが発生しました。");
		}

		RequestDispatcher dispatcher = req.getRequestDispatcher(forward);
		dispatcher.forward(req, resp);
	}

	/**
	 * 各ボタン押下時振り分け処理
	 */
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String action = req.getParameter("action");
		String forward = null;

		// ログイン処理
		if("login_action".equals(action)) {
			forward = doLoginAction(req, resp);
		// 登録画面遷移処理
		} else if("add".equals(action)) {
			forward = JSP_BASE + "add.jsp";
		// 登録処理
		} else if("add_action".equals(action)) {
			try {
				addItems(req);
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				req.setAttribute("items", items);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "list.jsp";
		// 一覧画面遷移処理
		} else if("list".equals(action)) {
			try {
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				req.setAttribute("items", items);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "list.jsp";
		// 削除画面遷移処理
		} else if("delete".equals(action)) {
			try {
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				Integer deleteRowNo = Integer.valueOf(req.getParameter("deleteRowNo"));
				Item deleteItem = null;
				for(int i=0; i<items.length; i++) {
					if(Integer.parseInt(items[i].get_id()) == deleteRowNo) {
						deleteItem = items[i];
						break;
					}
				}
				req.setAttribute("deleteItem", deleteItem);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "delete.jsp";
		// 削除処理
		} else if("delete_action".equals(action)) {
			try {
				deleteItems(req);
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				req.setAttribute("items", items);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "list.jsp";
		// 更新画面遷移処理
		} else if("update".equals(action)) {
			try {
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				Integer updateRowNo = Integer.valueOf(req.getParameter("updateRowNo"));
				Item updateItem = null;
				for(int i=0; i<items.length; i++) {
					if(Integer.parseInt(items[i].get_id()) == updateRowNo) {
						updateItem = items[i];
						break;
					}
				}
				req.setAttribute("updateItem", updateItem);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "update.jsp";
		// 更新処理
		} else if("update_action".equals(action)) {
			try {
				updateItems(req);
				User user = (User)req.getSession().getAttribute("currentUser");
				String userId = user.get_id();
				String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
				Item[] items = getItems(where);
				req.setAttribute("items", items);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "list.jsp";
		// 検索処理
		} else if("search".equals(action)) {
			String keyWord = changeSafeString(new String((req.getParameter("keyWord")).getBytes("8859_1"),"UTF-8"));
			String changeKeyWord = createRegExp(keyWord);
			User user = (User)req.getSession().getAttribute("currentUser");
			String userId = user.get_id();
			String searchSql = searchSQL(userId, changeKeyWord);
			try {
				Item[] items = searchItems(searchSql);
				req.setAttribute("items", items);
			} catch (SQLException e) {
				forward = doError(req, resp, e.getMessage());
			}

			forward = JSP_BASE + "searchList.jsp";
		// ログアウト処理
		} else if("logout".equals(action)) {
			forward = JSP_BASE + "login.jsp";
		// エラー処理
		} else {
			forward = doError(req, resp, "ログイン時にエラーが発生しました。");
		}

		RequestDispatcher dispatcher = req.getRequestDispatcher(forward);
		dispatcher.forward(req, resp);
	}

	/**
	 * ログイン処理
	 * @param req リクエスト
	 * @param resp レスポンス
	 * @return 一覧画面JSP
	 * @throws ServletException
	 * @throws IOException
	 */
	private String doLoginAction(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String userId = req.getParameter("userId");
		String passWord = req.getParameter("passWord");

		if(userId == null || passWord == null) {
			return doError(req, resp, "ユーザIDとパスワードが入力されていません。");
		}

		if(isAlphaOrDigit(userId) == false) {
			return doError(req, resp, "ユーザIDは半角英数字で入力して下さい。");
		}

		if(isAlphaOrDigit(passWord) == false) {
			return doError(req, resp, "パスワードは半角英数字で入力して下さい。");
		}

		try {
			User user = getUser(userId, passWord);
			if(user == null) {
				return doError(req, resp, "ユーザが見つかりません。");
			}

			req.getSession().setAttribute("currentUser", user);

			String where = "TODO_USER.ID='" + userId + "' and TODO_ITEM.USER='" + userId + "'";
			Item[] items = getItems(where);

			req.setAttribute("items", items);

			return JSP_BASE + "list.jsp";
		} catch(SQLException e) {
			return doError(req, resp, e.getMessage());
		}
	}

	/**
	 * エラー処理
	 * @param req リクエスト
	 * @param resp レスポンス
	 * @param message エラーメッセージ
	 * @return エラー画面JSP
	 * @throws ServletException
	 * @throws IOException
	 */
	private String doError(HttpServletRequest req, HttpServletResponse resp, String message) throws ServletException, IOException {
		req.setAttribute("message", message);

		return JSP_BASE + "error.jsp";
	}

	/**
	 * コネクション取得処理
	 * @return コネクション
	 * @throws SQLException
	 */
	private Connection getConnection() throws SQLException {
		if(_pooledConnection != null) {
			return _pooledConnection;
		}
		try {
			Class.forName("org.h2.Driver");
			_pooledConnection = DriverManager.getConnection("jdbc:h2:tcp://localhost/~/test", "sa", "");
			return _pooledConnection;
		} catch(ClassNotFoundException e) {
			_pooledConnection = null;
			throw new SQLException(e);
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		}
	}

	/**
	 * ユーザ情報取得処理
	 * @param userId ユーザID
	 * @param passWord パスワード
	 * @return ユーザ情報
	 * @throws SQLException
	 */
	private User getUser(String userId, String passWord) throws SQLException {
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT ID,NAME FROM TODO_USER WHERE ID='" + userId + "' AND PASSWORD='" + passWord + "'");
			boolean br = resultSet.first();
			if (br == false) {
				return null;
			}
			User user = new User();
			user.set_id(resultSet.getString("ID"));
			user.set_name(resultSet.getString("NAME"));

			return user;
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if (statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 一覧情報取得処理
	 * @param where ユーザ情報
	 * @return 一覧情報
	 * @throws SQLException
	 */
	private Item[] getItems(String where) throws SQLException {
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			ResultSet resultSet = statement.executeQuery(createSQL(where));
			boolean br = resultSet.first();
			if(br == false) {
				return new Item[0];
			}
			ArrayList<Item> items = new ArrayList<Item>();
			do {
				Item item = new Item();
				item.set_id(resultSet.getString("TODO_ITEM.ID"));
				item.set_name(resultSet.getString("TODO_ITEM.NAME"));
				item.set_color(resultSet.getString("TODO_ITEM.COLOR"));
				item.set_span(resultSet.getString("TODO_ITEM.SPAN"));
				item.set_place(resultSet.getString("TODO_ITEM.PLACE"));

				User user = new User();
				user.set_id(resultSet.getString("TODO_USER.ID"));
				user.set_name(resultSet.getString("TODO_USER.NAME"));

				item.set_user(user);
				items.add(item);
			} while(resultSet.next());

			return items.toArray(new Item[0]);
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if(statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 登録処理
	 * @param req リクエスト
	 * @throws SQLException
	 * @throws UnsupportedEncodingException
	 */
	private void addItems(HttpServletRequest req) throws SQLException, UnsupportedEncodingException {
		User user = (User)req.getSession().getAttribute("currentUser");
		String userId = user.get_id();
		String name = changeSafeString(new String((req.getParameter("name")).getBytes("8859_1"),"UTF-8"));
		String color = changeSafeString(new String((req.getParameter("color")).getBytes("8859_1"),"UTF-8"));
		String span = changeSafeString(new String((req.getParameter("span")).getBytes("8859_1"),"UTF-8"));
		String place = changeSafeString(new String((req.getParameter("place")).getBytes("8859_1"),"UTF-8"));
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			statement.executeUpdate(insertSQL(userId,name,color,span,place));
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if(statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 削除処理
	 * @param req リクエスト
	 * @throws SQLException
	 * @throws UnsupportedEncodingException
	 */
	private void deleteItems(HttpServletRequest req) throws SQLException, UnsupportedEncodingException {
		Integer id = Integer.parseInt(req.getParameter("id"));
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			statement.executeUpdate(deleteSQL(id));
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if(statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 更新処理
	 * @param req リクエスト
	 * @throws SQLException
	 * @throws UnsupportedEncodingException
	 */
	private void updateItems(HttpServletRequest req) throws SQLException, UnsupportedEncodingException {
		Integer id = Integer.parseInt(req.getParameter("id"));
		User user = (User)req.getSession().getAttribute("currentUser");
		String userId = user.get_id();
		String name = changeSafeString(new String((req.getParameter("name")).getBytes("8859_1"),"UTF-8"));
		String color = changeSafeString(new String((req.getParameter("color")).getBytes("8859_1"),"UTF-8"));
		String span = changeSafeString(new String((req.getParameter("span")).getBytes("8859_1"),"UTF-8"));
		String place = changeSafeString(new String((req.getParameter("place")).getBytes("8859_1"),"UTF-8"));
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			statement.executeUpdate(updateSQL(id,userId,name,color,span,place));
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if(statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 一覧情報取得SQL文作成関数
	 * @param where ユーザ情報
	 * @return 一覧情報取得SQL文
	 */
	private String createSQL(String where) {
		StringBuffer buf = new StringBuffer();
		buf.append("SELECT TODO_ITEM.ID,TODO_ITEM.NAME,TODO_ITEM.COLOR,TODO_ITEM.SPAN,TODO_ITEM.PLACE,TODO_USER.ID,TODO_USER.NAME FROM TODO_USER,TODO_ITEM");
		if (where != null) {
			buf.append(" WHERE ");
			buf.append(where);
		}
		return buf.toString();
	}

	/**
	 * 登録SQL文作成関数
	 * @param user ユーザID
	 * @param name 花の名前
	 * @param color 花の色
	 * @param span 花の開花期間
	 * @param place 花の生育地
	 * @return 登録SQL文
	 */
	private String insertSQL(String user, String name, String color, String span, String place) {
		StringBuffer buf = new StringBuffer();
		buf.append("INSERT INTO TODO_ITEM (ID,USER,NAME,COLOR,SPAN,PLACE) VALUES (no_seq.nextval,'" + user + "','" + name + "','" + color + "','" + span + "','" + place + "')");
		return buf.toString();
	}

	/**
	 * 削除SQL文作成関数
	 * @param id ID
	 * @return 削除SQL文
	 */
	private String deleteSQL(Integer id) {
		StringBuffer buf = new StringBuffer();
		buf.append("DELETE FROM TODO_ITEM WHERE ID=" + id);
		return buf.toString();
	}

	/**
	 * 更新SQL文作成関数
	 * @param id ID
	 * @param user ユーザID
	 * @param name 花の名前
	 * @param color 花の色
	 * @param span 花の開花期間
	 * @param place 花の生育地
	 * @return 更新SQL文
	 */
	private String updateSQL(Integer id, String user, String name, String color, String span, String place) {
		StringBuffer buf = new StringBuffer();
		buf.append("UPDATE TODO_ITEM SET USER='" + user + "', NAME='" + name + "', COLOR='" + color + "', SPAN='" + span + "', PLACE='" + place + "' WHERE ID=" + id);
		return buf.toString();
	}

	/**
	 * 検索キーワード分割関数
	 * @param keyWord 連結検索キーワード
	 * @return 分割検索キーワード
	 */
	private String createRegExp(String keyWord) {
		StringTokenizer tokenizer = new StringTokenizer(keyWord, "　 ");
		if(tokenizer.countTokens() == 0) {
			return null;
		}
		StringBuffer buf = new StringBuffer();
		while(tokenizer.hasMoreTokens()) {
			String token = tokenizer.nextToken();
			if(buf.length() > 0) {
				buf.append("|");
			}
			buf.append(token);
		}
		return "'" + buf.toString() + "'";
	}

	/**
	 * 検索SQL文作成関数
	 * @param id ユーザID
	 * @param keyWord 検索キーワード
	 * @return 検索SQL文
	 */
	private String searchSQL(String id, String keyWord) {
		StringBuffer buf = new StringBuffer();
		buf.append("SELECT * FROM (SELECT TODO_ITEM.ID,TODO_ITEM.USER,TODO_ITEM.NAME,TODO_ITEM.COLOR,TODO_ITEM.SPAN,TODO_ITEM.PLACE FROM TODO_USER,TODO_ITEM WHERE TODO_USER.ID='" + id + "' AND TODO_ITEM.USER='" + id + "') BASETABLE");
		if (keyWord != null) {
			buf.append(" WHERE BASETABLE.NAME REGEXP " + keyWord + " OR BASETABLE.COLOR REGEXP " + keyWord + " OR BASETABLE.SPAN REGEXP " + keyWord + " OR BASETABLE.PLACE REGEXP " + keyWord);
		}
		return buf.toString();
	}

	/**
	 * 検索処理
	 * @param searchSql 検索SQL文
	 * @return 検索一覧
	 * @throws SQLException
	 */
	private Item[] searchItems(String searchSql) throws SQLException {
		Statement statement = null;
		try {
			statement = getConnection().createStatement();
			ResultSet resultSet = statement.executeQuery(searchSql);
			boolean br = resultSet.first();
			if(br == false) {
				return new Item[0];
			}
			ArrayList<Item> items = new ArrayList<Item>();
			do {
				Item item = new Item();
				item.set_id(resultSet.getString("ID"));
				item.set_name(resultSet.getString("NAME"));
				item.set_color(resultSet.getString("COLOR"));
				item.set_span(resultSet.getString("SPAN"));
				item.set_place(resultSet.getString("PLACE"));
				items.add(item);
			} while(resultSet.next());

			return items.toArray(new Item[0]);
		} catch(SQLException e) {
			_pooledConnection = null;
			throw e;
		} finally {
			if(statement != null) {
				statement.close();
				statement = null;
			}
		}
	}

	/**
	 * 文字列が半角英数字かチェックする関数
	 * @param inputString 入力された文字列
	 * @return true: 文字列が全て半角英数字 false: 文字列に半角英数字以外が含まれている
	 */
	private boolean isAlphaOrDigit(String inputString) {
		for(int i=0; i<inputString.length(); i++) {
			char ch = inputString.charAt(i);
			if(isAlphaOrDigit(ch) == false) {
				return false;
			}
		}
		return true;
	}

	/**
	 * 文字が半角英数字かチェックする関数
	 * @param ch 文字
	 * @return  true: 文字が半角英数字 false: 文字が半角英数字以外
	 */
	private boolean isAlphaOrDigit(char ch) {
		if('A' <= ch && ch <= 'Z') {
			return true;
		}
		if('a' <= ch && ch <= 'z') {
			return true;
		}
		if('0' <= ch && ch <= '9') {
			return true;
		}
		return false;
	}

	/**
	 * 入力文字列を安全な文字列に変換する関数
	 * @param inputString 入力文字列
	 * @return 変換入力文字列
	 */
	private String changeSafeString(String inputString) {
		inputString = inputString.replaceAll("&", "&amp;");
		inputString = inputString.replaceAll("<", "&lt;");
		inputString = inputString.replaceAll(">", "&gt;");
		inputString = inputString.replaceAll("'", "&#39;");
		inputString = inputString.replaceAll("\"", "&quot;");
		return inputString;
	}
}
